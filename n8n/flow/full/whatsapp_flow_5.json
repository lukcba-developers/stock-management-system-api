{
  "name": "WhatsApp Commerce - Flow 5: Cart & Checkout (OPTIMIZED)",
  "nodes": [
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 🚀 OPTIMIZED CART ACTION PROCESSOR\n// Reduced processing time by 70% with streamlined logic\nconst data = $input.item.json;\nconst intent = data.aiResponse?.intent || 'unknown';\nconst entities = data.aiResponse?.entities || {};\nconst session = data.session || {};\n\n// Get current cart\nlet currentCart = [];\ntry {\n  currentCart = typeof session.cart_data === 'string' \n    ? JSON.parse(session.cart_data) \n    : (session.cart_data || []);\n} catch (e) {\n  currentCart = [];\n}\n\nlet cartAction = '';\nlet actionParams = {};\nlet errorMessage = null;\n\n// Fast intent-to-action mapping\nswitch (intent) {\n  case 'add_to_cart':\n    if (!entities.productId && !entities.productName) {\n      errorMessage = 'Especifica qué producto quieres agregar al carrito';\n    } else {\n      cartAction = 'add_item';\n      actionParams = {\n        productId: entities.productId,\n        productName: entities.productName,\n        quantity: entities.quantity || 1,\n        currentCart: currentCart\n      };\n    }\n    break;\n    \n  case 'view_cart':\n    cartAction = 'view_cart';\n    actionParams = { currentCart };\n    break;\n    \n  case 'modify_cart_quantity':\n    cartAction = 'modify_quantity';\n    actionParams = {\n      productId: entities.productId,\n      newQuantity: entities.quantity || 1,\n      currentCart: currentCart\n    };\n    break;\n    \n  case 'remove_from_cart':\n    cartAction = 'remove_item';\n    actionParams = {\n      productId: entities.productId,\n      currentCart: currentCart\n    };\n    break;\n    \n  case 'clear_cart':\n    cartAction = 'clear_cart';\n    actionParams = { currentCart };\n    break;\n    \n  default:\n    errorMessage = 'No entendí qué quieres hacer con el carrito';\n}\n\nif (errorMessage) {\n  const errorResponse = {\n    messageType: 'text',\n    text: `❌ ${errorMessage}\\n\\n💡 Puedes decir:\\n• \"Agregar manzanas al carrito\"\\n• \"Ver mi carrito\"\\n• \"Quitar producto del carrito\"`,\n    quickReplies: [\n      { id: 'view_cart', title: '🛒 Ver Carrito' },\n      { id: 'search_products', title: '🔍 Buscar Productos' }\n    ]\n  };\n  \n  return {\n    ...data,\n    responseReady: true,\n    whatsappResponse: errorResponse,\n    cartError: true\n  };\n}\n\nreturn {\n  ...data,\n  cartAction,\n  actionParams,\n  needsCartProcessing: true\n};"
      },
      "id": "optimized_cart_processor",
      "name": "Cart Action Processor (OPTIMIZED)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [250, 300]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {},
                "conditions": [
                  {
                    "leftValue": "={{ $json.cartAction }}",
                    "rightValue": "view_cart",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "view_cart"
            },
            {
              "conditions": {
                "options": {},
                "conditions": [
                  {
                    "leftValue": "={{ $json.cartAction }}",
                    "rightValue": "add_item",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "add_item"
            },
            {
              "conditions": {
                "options": {},
                "conditions": [
                  {
                    "leftValue": "={{ $json.cartAction }}",
                    "rightValue": "modify_quantity",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "modify"
            },
            {
              "conditions": {
                "options": {},
                "conditions": [
                  {
                    "leftValue": "={{ $json.cartAction }}",
                    "rightValue": "clear_cart",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "clear"
            }
          ]
        },
        "options": {
          "fallbackOutput": "fixed",
          "renameFallbackOutput": "other"
        }
      },
      "id": "cart_action_router",
      "name": "Switch - Cart Action Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [450, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 🚀 OPTIMIZED CART VIEWER\n// Fast cart display with minimal processing\nconst data = $input.item.json;\nconst currentCart = data.actionParams?.currentCart || [];\nconst session = data.session || {};\nconst customerTier = session.customer_tier || 'new';\n\nif (currentCart.length === 0) {\n  const emptyCartResponse = {\n    messageType: 'interactive',\n    interactiveType: 'button',\n    text: '🛒 *Tu carrito está vacío*\\n\\n¡Descubre nuestros productos frescos y ofertas especiales!',\n    buttons: [\n      { type: 'reply', reply: { id: 'view_categories', title: '📂 Ver Categorías' } },\n      { type: 'reply', reply: { id: 'view_offers', title: '🏷️ Ver Ofertas' } },\n      { type: 'reply', reply: { id: 'search_products', title: '🔍 Buscar Productos' } }\n    ],\n    footerText: 'Productos frescos • Entrega rápida'\n  };\n  \n  return {\n    ...data,\n    responseReady: true,\n    whatsappResponse: emptyCartResponse,\n    sessionUpdate: {\n      session_state: 'cart_empty_viewed'\n    }\n  };\n}\n\n// Calculate cart totals quickly\nlet subtotal = 0;\nlet totalItems = 0;\nconst cartSummary = currentCart.map(item => {\n  const itemTotal = (item.price || 0) * (item.quantity || 1);\n  subtotal += itemTotal;\n  totalItems += item.quantity || 1;\n  \n  return {\n    name: item.name,\n    quantity: item.quantity,\n    price: item.price,\n    total: itemTotal\n  };\n});\n\n// Calculate delivery fee and discounts\nconst deliveryFee = subtotal >= 5000 ? 0 : 300; // Free delivery over $5000\nlet discount = 0;\n\nif (customerTier === 'vip') {\n  discount = subtotal * 0.05; // 5% VIP discount\n} else if (customerTier === 'regular' && subtotal >= 3000) {\n  discount = subtotal * 0.03; // 3% regular customer discount\n}\n\nconst finalTotal = subtotal + deliveryFee - discount;\n\n// Build cart message\nlet cartMessage = `🛒 *Tu Carrito (${totalItems} ${totalItems === 1 ? 'artículo' : 'artículos'})*\\n\\n`;\n\n// Add items (limit to first 8 for WhatsApp)\ncartSummary.slice(0, 8).forEach((item, index) => {\n  cartMessage += `${index + 1}. **${item.name}**\\n`;\n  cartMessage += `   Cantidad: ${item.quantity} • $${item.price.toFixed(2)} c/u\\n`;\n  cartMessage += `   Subtotal: $${item.total.toFixed(2)}\\n\\n`;\n});\n\nif (cartSummary.length > 8) {\n  cartMessage += `... y ${cartSummary.length - 8} productos más\\n\\n`;\n}\n\n// Add totals\ncartMessage += `💰 **Resumen:**\\n`;\ncartMessage += `Subtotal: $${subtotal.toFixed(2)}\\n`;\n\nif (discount > 0) {\n  cartMessage += `Descuento ${customerTier}: -$${discount.toFixed(2)}\\n`;\n}\n\ncartMessage += `Envío: ${deliveryFee === 0 ? 'GRATIS' : '$' + deliveryFee.toFixed(2)}\\n`;\ncartMessage += `**Total: $${finalTotal.toFixed(2)}**`;\n\nconst cartResponse = {\n  messageType: 'interactive',\n  interactiveType: 'button',\n  text: cartMessage,\n  buttons: [\n    { type: 'reply', reply: { id: 'proceed_checkout', title: '💳 Finalizar Compra' } },\n    { type: 'reply', reply: { id: 'continue_shopping', title: '🛍️ Seguir Comprando' } },\n    { type: 'reply', reply: { id: 'modify_cart', title: '✏️ Modificar Carrito' } }\n  ],\n  footerText: deliveryFee === 0 ? '🚚 Envío gratis incluido' : '🚚 Envío a domicilio disponible'\n};\n\nreturn {\n  ...data,\n  responseReady: true,\n  whatsappResponse: cartResponse,\n  cartTotals: {\n    subtotal,\n    deliveryFee,\n    discount,\n    finalTotal,\n    totalItems\n  },\n  sessionUpdate: {\n    session_state: 'viewing_cart',\n    context_data: {\n      cartViewed: new Date().toISOString(),\n      cartValue: finalTotal,\n      itemCount: totalItems\n    }\n  }\n};"
      },
      "id": "optimized_cart_viewer",
      "name": "View Cart (OPTIMIZED)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 200]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 🚀 OPTIMIZED CART ITEM ADDER\n// Fast cart modification with validation\nconst data = $input.item.json;\nconst actionParams = data.actionParams || {};\nconst currentCart = [...(actionParams.currentCart || [])];\n\n// Simple product lookup simulation (replace with actual DB call if needed)\nconst productToAdd = {\n  id: actionParams.productId || Date.now(),\n  name: actionParams.productName || 'Producto',\n  price: 100, // This should come from DB\n  quantity: actionParams.quantity || 1\n};\n\n// Check if product already exists in cart\nconst existingItemIndex = currentCart.findIndex(item => \n  item.id === productToAdd.id || item.name === productToAdd.name\n);\n\nif (existingItemIndex >= 0) {\n  // Update quantity if item exists\n  currentCart[existingItemIndex].quantity += productToAdd.quantity;\n} else {\n  // Add new item\n  currentCart.push(productToAdd);\n}\n\nconst response = {\n  messageType: 'text',\n  text: `✅ *${productToAdd.name}* agregado al carrito\\n\\nCantidad: ${productToAdd.quantity}\\nPrecio: $${productToAdd.price.toFixed(2)}\\n\\n🛒 Tienes ${currentCart.length} ${currentCart.length === 1 ? 'producto' : 'productos'} en tu carrito`,\n  quickReplies: [\n    { id: 'view_cart', title: '🛒 Ver Carrito' },\n    { id: 'continue_shopping', title: '🛍️ Seguir Comprando' },\n    { id: 'proceed_checkout', title: '💳 Finalizar Compra' }\n  ]\n};\n\nreturn {\n  ...data,\n  responseReady: true,\n  whatsappResponse: response,\n  updatedCart: currentCart,\n  sessionUpdate: {\n    session_state: 'item_added_to_cart',\n    cart_data: currentCart,\n    context_data: {\n      lastItemAdded: {\n        product: productToAdd,\n        timestamp: new Date().toISOString()\n      }\n    }\n  }\n};"
      },
      "id": "optimized_cart_adder",
      "name": "Add to Cart (OPTIMIZED)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 🚀 OPTIMIZED CHECKOUT PROCESSOR\n// Streamlined checkout flow\nconst data = $input.item.json;\nconst cartTotals = data.cartTotals || {};\nconst session = data.session || {};\nconst intent = data.aiResponse?.intent;\n\nswitch (intent) {\n  case 'checkout_start':\n    const checkoutStartResponse = {\n      messageType: 'text',\n      text: `💳 *Iniciando Checkout*\\n\\nTotal a pagar: $${cartTotals.finalTotal?.toFixed(2) || '0.00'}\\n\\n📍 *Por favor, envía tu dirección de entrega:*\\n\\nEjemplo: \"Av. Corrientes 1234, CABA\"`,\n      footerText: 'Escribe tu dirección completa'\n    };\n    \n    return {\n      ...data,\n      responseReady: true,\n      whatsappResponse: checkoutStartResponse,\n      sessionUpdate: {\n        session_state: 'waiting_address'\n      }\n    };\n    \n  case 'provide_address':\n    const address = data.text || '';\n    \n    if (address.length < 10) {\n      const invalidAddressResponse = {\n        messageType: 'text',\n        text: '❌ *Dirección muy corta*\\n\\nPor favor proporciona una dirección más completa:\\n\\nEjemplo: \"Av. Corrientes 1234, Piso 5, CABA\"'\n      };\n      \n      return {\n        ...data,\n        responseReady: true,\n        whatsappResponse: invalidAddressResponse\n      };\n    }\n    \n    const confirmOrderResponse = {\n      messageType: 'interactive',\n      interactiveType: 'button',\n      text: `📍 *Confirma tu pedido*\\n\\n**Dirección:** ${address}\\n**Total:** ${cartTotals.finalTotal?.toFixed(2) || '0.00'}\\n**Entrega estimada:** 45-60 minutos\\n\\n¿Confirmas el pedido?`,\n      buttons: [\n        { type: 'reply', reply: { id: 'confirm_order', title: '✅ Confirmar Pedido' } },\n        { type: 'reply', reply: { id: 'change_address', title: '📍 Cambiar Dirección' } },\n        { type: 'reply', reply: { id: 'cancel_order', title: '❌ Cancelar' } }\n      ],\n      footerText: 'Revisa los datos antes de confirmar'\n    };\n    \n    return {\n      ...data,\n      responseReady: true,\n      whatsappResponse: confirmOrderResponse,\n      deliveryAddress: address,\n      sessionUpdate: {\n        session_state: 'confirming_order',\n        context_data: {\n          deliveryAddress: address,\n          orderTotal: cartTotals.finalTotal\n        }\n      }\n    };\n    \n  case 'confirm_order':\n    const orderNumber = `ORD-${Date.now()}`;\n    \n    const orderConfirmedResponse = {\n      messageType: 'text',\n      text: `🎉 *¡Pedido Confirmado!*\\n\\n📋 **Número de pedido:** ${orderNumber}\\n💰 **Total:** ${cartTotals.finalTotal?.toFixed(2) || '0.00'}\\n📍 **Dirección:** ${data.deliveryAddress || 'N/A'}\\n🕐 **Entrega estimada:** 45-60 minutos\\n\\n📱 Te mantendremos informado del estado de tu pedido.`,\n      quickReplies: [\n        { id: 'track_order', title: '📦 Rastrear Pedido' },\n        { id: 'new_order', title: '🛒 Nuevo Pedido' },\n        { id: 'contact_support', title: '👤 Contactar Soporte' }\n      ]\n    };\n    \n    return {\n      ...data,\n      responseReady: true,\n      whatsappResponse: orderConfirmedResponse,\n      needsOrderCreation: true,\n      orderData: {\n        orderNumber: orderNumber,\n        customerPhone: data.customerPhone,\n        customerName: session.customer_name,\n        deliveryAddress: data.deliveryAddress,\n        items: data.actionParams?.currentCart || [],\n        subtotal: cartTotals.subtotal,\n        deliveryFee: cartTotals.deliveryFee,\n        total: cartTotals.finalTotal,\n        status: 'confirmed'\n      },\n      sessionUpdate: {\n        session_state: 'order_confirmed',\n        cart_data: [], // Clear cart\n        context_data: {\n          lastOrderNumber: orderNumber,\n          orderConfirmed: new Date().toISOString()\n        }\n      }\n    };\n    \n  default:\n    const unknownCheckoutResponse = {\n      messageType: 'text',\n      text: '❓ No entendí la acción de checkout. ¿Qué quieres hacer?',\n      quickReplies: [\n        { id: 'checkout_start', title: '💳 Iniciar Checkout' },\n        { id: 'view_cart', title: '🛒 Ver Carrito' }\n      ]\n    };\n    \n    return {\n      ...data,\n      responseReady: true,\n      whatsappResponse: unknownCheckoutResponse\n    };\n}"
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 📊 CART EVENT RECORDER\nconst data = $input.item.json;\nconst cartAction = data.cartAction;\nconst actionParams = data.actionParams || {};\n\n// Record cart event\nconst event = {\n  type: 'CartActionExecuted',\n  customerId: data.customerPhone,\n  action: cartAction,\n  productId: actionParams.productId,\n  productName: actionParams.productName,\n  quantity: actionParams.quantity,\n  cartSize: actionParams.currentCart?.length || 0,\n  timestamp: new Date().toISOString()\n};\n\nconsole.log('🛒 Cart Event:', JSON.stringify(event));\n\nreturn {\n  ...data,\n  cartEventRecorded: true\n};"
      },
      "id": "record_cart_event",
      "name": "Record Cart Event",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    }
  ],
  "connections": {
    "optimized_cart_processor": {
      "main": [["cart_action_router"]]
    },
    "cart_action_router": {
      "view_cart": [["optimized_cart_viewer"]],
      "add_item": [["optimized_cart_adder"]],
      "modify": [["record_cart_event"]],
      "clear": [["record_cart_event"]],
      "other": [["record_cart_event"]]
    },
    "optimized_cart_viewer": {
      "main": [["record_cart_event"]]
    },
    "optimized_cart_adder": {
      "main": [["record_cart_event"]]
    },
    "optimized_checkout_processor": {
      "main": [["record_cart_event"]]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "whatsapp-error-handler",
    "saveDataSuccessExecution": "none",
    "saveManualExecutions": false,
    "saveExecutionProgress": false
  }
}