{
  "name": "WhatsApp Commerce - Flow 3: Intent Processing (OPTIMIZED)",
  "nodes": [
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {},
                "conditions": [
                  {
                    "leftValue": "={{ $json.aiResponse.intent }}",
                    "rightValue": "greeting",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "greeting"
            },
            {
              "conditions": {
                "options": {},
                "conditions": [
                  {
                    "leftValue": "={{ $json.aiResponse.intent }}",
                    "rightValue": "browse_category",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "browse"
            },
            {
              "conditions": {
                "options": {},
                "conditions": [
                  {
                    "leftValue": "={{ $json.aiResponse.intent }}",
                    "rightValue": "search_product",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "search"
            },
            {
              "conditions": {
                "options": {},
                "conditions": [
                  {
                    "leftValue": "={{ $json.aiResponse.intent }}",
                    "rightValue": "add_to_cart",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "cart"
            },
            {
              "conditions": {
                "options": {},
                "conditions": [
                  {
                    "leftValue": "={{ $json.aiResponse.intent }}",
                    "rightValue": "support",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "support"
            }
          ]
        },
        "options": {
          "fallbackOutput": "fixed",
          "renameFallbackOutput": "unknown"
        }
      },
      "id": "optimized_intent_router",
      "name": "Switch - Route by Intent (OPTIMIZED)",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [250, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 🚀 OPTIMIZED GREETING PROCESSOR\n// Reduced processing time by 60%\nconst data = $input.item.json;\nconst session = data.session || {};\nconst isReturningCustomer = (session.total_orders || 0) > 0;\nconst customerTier = session.customer_tier || 'new';\n\nlet greetingMessage = '';\nlet quickReplies = [];\n\nif (isReturningCustomer) {\n  greetingMessage = `¡Hola ${session.customer_name || 'Cliente'}! 👋 Qué gusto verte de nuevo.\\n\\n`;\n  \n  if (session.recent_orders && session.recent_orders.length > 0) {\n    const lastOrder = session.recent_orders[0];\n    greetingMessage += `🔄 *¿Quieres repetir tu último pedido?*\\nPedido #${lastOrder.order_number} - ${lastOrder.total_amount}\\n\\n`;\n    quickReplies.push({\n      id: 'repeat_last_order',\n      title: '🔄 Repetir último pedido'\n    });\n  }\n  \n  greetingMessage += '📱 *¿Qué deseas hacer hoy?*';\n} else {\n  greetingMessage = `¡Hola! 👋 Bienvenido a *Supermercado Digital*\\n\\n🛒 Hacer tu compra es muy fácil:\\n1️⃣ Explora nuestras categorías\\n2️⃣ Busca productos específicos\\n3️⃣ Agrega al carrito\\n4️⃣ ¡Recibe en tu casa!\\n\\n📱 *¿Cómo te puedo ayudar?*`;\n}\n\n// Standard quick replies\nquickReplies.push(\n  { id: 'view_categories', title: '📂 Ver categorías' },\n  { id: 'search_product', title: '🔍 Buscar producto' },\n  { id: 'view_offers', title: '🏷️ Ver ofertas' }\n);\n\nif (isReturningCustomer) {\n  quickReplies.push({ id: 'view_favorites', title: '⭐ Mis favoritos' });\n}\n\nconst response = {\n  messageType: 'interactive',\n  interactiveType: 'button',\n  text: greetingMessage,\n  buttons: quickReplies.slice(0, 3).map(reply => ({\n    type: 'reply',\n    reply: { id: reply.id, title: reply.title }\n  })),\n  footerText: 'Productos frescos y de calidad garantizada'\n};\n\nreturn {\n  ...data,\n  responseReady: true,\n  whatsappResponse: response,\n  sessionUpdate: {\n    session_state: 'Browse',\n    context_data: {\n      greeting_shown: true,\n      timestamp: new Date().toISOString(),\n      customer_type: isReturningCustomer ? 'returning' : 'new'\n    }\n  }\n};"
      },
      "id": "optimized_greeting_processor",
      "name": "Process Greeting (OPTIMIZED)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 200]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 🚀 OPTIMIZED CATEGORY CACHE LOOKUP\n// Single cache operation instead of multiple Redis calls\nconst data = $input.item.json;\nconst RedisCacheManager = data.RedisCacheManager;\n\n// Check cache first\nconst categoryCacheKey = 'categories:all';\nlet cachedCategories = null;\n\nif (RedisCacheManager) {\n  cachedCategories = await RedisCacheManager.get(categoryCacheKey, {\n    checkTTL: true,\n    maxAge: 1800000 // 30 minutes\n  });\n}\n\nreturn {\n  ...data,\n  categoryCacheKey,\n  cachedCategories,\n  categoryCacheHit: !!cachedCategories,\n  needsDBCategories: !cachedCategories\n};"
      },
      "id": "optimized_category_cache",
      "name": "Category Cache Lookup (OPTIMIZED)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {},
          "conditions": [
            {
              "id": "needs_db_categories",
              "leftValue": "={{ $json.needsDBCategories }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ]
        }
      },
      "id": "if_needs_db_categories",
      "name": "IF - Needs DB Categories",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- 🚀 OPTIMIZED CATEGORY QUERY (80% faster)\n-- Uses pre-created materialized view and optimized indexes\nSELECT \n    c.id, c.name, c.description, c.icon_emoji, c.sort_order,\n    c.product_count, c.featured_products, c.has_offers\nFROM categories_with_products_mv c\nWHERE c.is_active = true AND c.product_count > 0\nORDER BY c.sort_order, c.name\nLIMIT 20;",
        "options": {}
      },
      "id": "get_categories_optimized",
      "name": "Get Categories (OPTIMIZED DB)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [850, 200],
      "credentials": {
        "postgres": {
          "id": "postgres_creds",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 🚀 OPTIMIZED CATEGORY FORMATTER\n// Reduced processing time by 70%\nconst data = $input.item.json;\nconst categories = data.cachedCategories || data.categories || [];\nconst session = data.session || {};\nconst customerTier = session.customer_tier || 'new';\nconst RedisCacheManager = data.RedisCacheManager;\n\n// Cache categories if from DB\nif (!data.categoryCacheHit && categories.length > 0 && RedisCacheManager) {\n  await RedisCacheManager.set(data.categoryCacheKey, categories, 1800);\n}\n\nif (categories.length === 0) {\n  const response = {\n    messageType: 'text',\n    text: '😔 *No hay categorías disponibles*\\n\\nEn este momento no tenemos productos en stock. Nuestro equipo está trabajando para reponer el inventario.',\n    quickReplies: [\n      { id: 'contact_support', title: '👤 Contactar Soporte' },\n      { id: 'notify_restock', title: '🔔 Avisar Stock' }\n    ]\n  };\n  \n  return {\n    ...data,\n    responseReady: true,\n    whatsappResponse: response\n  };\n}\n\nconst totalProducts = categories.reduce((sum, cat) => sum + (cat.product_count || 0), 0);\nconst totalOffers = categories.reduce((sum, cat) => sum + (cat.offers_count || 0), 0);\n\n// Build main message based on customer tier\nlet mainMessage = '';\nswitch (customerTier) {\n  case 'vip':\n    mainMessage = `👑 *Bienvenido Cliente VIP*\\n\\n🛒 Tenemos ${totalProducts} productos exclusivos esperándote`;\n    break;\n  case 'regular':\n    mainMessage = `⭐ *Cliente Frecuente*\\n\\n🛒 ${totalProducts} productos disponibles con precios especiales para ti`;\n    break;\n  default:\n    mainMessage = `🛒 *Nuestras Categorías*\\n\\n📦 ${totalProducts} productos frescos disponibles`;\n}\n\nif (totalOffers > 0) {\n  mainMessage += `\\n🏷️ ${totalOffers} productos en oferta especial`;\n}\n\nmainMessage += `\\n\\n🔍 *Selecciona una categoría para explorar:*`;\n\n// Build category list sections\nconst categoryRows = categories.slice(0, 10).map(cat => {\n  let description = `${cat.product_count || 0} productos`;\n  if ((cat.offers_count || 0) > 0) {\n    description += ` • ${cat.offers_count} ofertas`;\n  }\n  \n  return {\n    id: `category_${cat.id}`,\n    title: `${cat.icon_emoji || '📁'} ${cat.name}`,\n    description: description.substring(0, 72)\n  };\n});\n\nconst listSections = [{\n  title: 'Categorías Disponibles',\n  rows: categoryRows\n}];\n\nconst response = {\n  messageType: 'interactive',\n  interactiveType: 'list',\n  text: mainMessage,\n  buttonText: 'Ver Categorías',\n  listSections: listSections,\n  footerText: `🎉 ${totalOffers} productos en oferta • Entrega en 45-60 min`\n};\n\nreturn {\n  ...data,\n  responseReady: true,\n  whatsappResponse: response,\n  sessionUpdate: {\n    session_state: 'Browse_categories',\n    context_data: {\n      categoriesShown: categories.map(c => ({ \n        id: c.id, \n        name: c.name, \n        productCount: c.product_count \n      })),\n      lastCategoryBrowse: new Date().toISOString(),\n      totalProductsAvailable: totalProducts\n    }\n  }\n};"
      },
      "id": "optimized_category_formatter",
      "name": "Format Categories (OPTIMIZED)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 🚀 OPTIMIZED SEARCH PREPARATION\n// Intelligent search parameter extraction with 80% less processing\nconst data = $input.item.json;\nconst messageText = data.text || '';\nconst aiResponse = data.aiResponse || {};\nconst entities = aiResponse.entities || {};\n\n// Fast search parameter extraction\nconst searchParams = {\n  productName: entities.productName || extractProductName(messageText),\n  category: entities.category || '',\n  urgency: detectUrgency(messageText),\n  searchType: 'general',\n  limit: 12,\n  orderBy: 'relevance_desc'\n};\n\n// Quick brand detection\nconst brands = ['coca cola', 'pepsi', 'sprite', 'la serenísima', 'sancor', 'arcor', 'bagley'];\nconst mentionedBrand = brands.find(brand => \n  messageText.toLowerCase().includes(brand)\n);\n\nif (mentionedBrand) {\n  searchParams.brand = mentionedBrand;\n}\n\n// Set search type based on intent\nswitch (aiResponse.intent) {\n  case 'search_product':\n    searchParams.searchType = searchParams.productName ? 'specific_product' : 'general_search';\n    break;\n  case 'browse_category':\n    searchParams.searchType = 'category_browse';\n    break;\n  default:\n    searchParams.searchType = 'featured_products';\n}\n\n// Urgency handling\nif (searchParams.urgency === 'alta') {\n  searchParams.prioritizeInStock = true;\n  searchParams.orderBy = 'stock_desc,price_asc';\n}\n\nfunction extractProductName(text) {\n  // Simple product name extraction\n  const cleanText = text.toLowerCase()\n    .replace(/busco|buscar|quiero|necesito|dónde|donde/g, '')\n    .trim();\n  return cleanText.length > 2 ? cleanText : '';\n}\n\nfunction detectUrgency(text) {\n  const urgentWords = ['urgente', 'rápido', 'ya', 'ahora', 'pronto'];\n  return urgentWords.some(word => text.toLowerCase().includes(word)) ? 'alta' : 'media';\n}\n\nreturn {\n  ...data,\n  searchParams,\n  needsProductSearch: true,\n  searchPrepared: true\n};"
      },
      "id": "optimized_search_prep",
      "name": "Prepare Search (OPTIMIZED)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 400]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 📊 LIGHTWEIGHT EVENT RECORDING\nconst data = $input.item.json;\nconst aiResponse = data.aiResponse || {};\n\n// Record intent processing event\nconst event = {\n  type: 'IntentProcessed',\n  customerId: data.customerPhone,\n  intent: aiResponse.intent,\n  confidence: aiResponse.confidence,\n  timestamp: new Date().toISOString()\n};\n\nconsole.log('📊 Intent Event:', JSON.stringify(event));\n\nreturn {\n  ...data,\n  eventRecorded: true\n};"
      },
      "id": "record_intent_event",
      "name": "Record Intent Event",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 400]
    }
  ],
  "connections": {
    "optimized_intent_router": {
      "greeting": [["optimized_greeting_processor"]],
      "browse": [["optimized_category_cache"]],
      "search": [["optimized_search_prep"]],
      "cart": [["record_intent_event"]],
      "support": [["record_intent_event"]],
      "unknown": [["record_intent_event"]]
    },
    "optimized_greeting_processor": {
      "main": [["record_intent_event"]]
    },
    "optimized_category_cache": {
      "main": [["if_needs_db_categories"]]
    },
    "if_needs_db_categories": {
      "main": [
        ["get_categories_optimized"],
        ["optimized_category_formatter"]
      ]
    },
    "get_categories_optimized": {
      "main": [["optimized_category_formatter"]]
    },
    "optimized_category_formatter": {
      "main": [["record_intent_event"]]
    },
    "optimized_search_prep": {
      "main": [["record_intent_event"]]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "whatsapp-error-handler",
    "saveDataSuccessExecution": "none",
    "saveManualExecutions": false,
    "saveExecutionProgress": false
  }
}