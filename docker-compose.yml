# docker-compose.yml optimizado con BD compartida

services:
  # 🚀 N8N MAIN (Queue Coordinator)
  n8n-main:
    image: n8nio/n8n:latest
    container_name: n8n_main
    restart: always
    ports:
      - "5678:5678"
    environment:
      # Configuración básica
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-n8n_admin_123}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=info

      # 🔄 SHARED DATABASE CONFIGURATION
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-stock_management}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-postgres}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-postgres123}

      # 🚀 QUEUE MODE CONFIGURATION
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0
      - QUEUE_HEALTH_CHECK_ACTIVE=true
      - QUEUE_RECOVERY_INTERVAL=30

      # 🔗 STOCK MANAGEMENT INTEGRATION
      - STOCK_API_URL=http://stock-backend:4000
      - STOCK_API_TOKEN=${STOCK_API_TOKEN:-stock_api_token_123}

      # Performance optimizations
      - N8N_PAYLOAD_SIZE_MAX=16
      - N8N_METRICS_INCLUDE_WORKFLOW_ID_LABEL=true
      - N8N_METRICS_INCLUDE_NODE_TYPE_LABEL=true

      # New variables
      - N8N_RUNNERS_ENABLED=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true

    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 🚀 N8N WORKER 1
  n8n-worker-1:
    image: n8nio/n8n:latest
    container_name: n8n_worker_1
    restart: always
    command: worker
    environment:
      # Shared database configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-stock_management}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-postgres}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-postgres123}

      # Queue configuration
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0

      # Worker settings
      - N8N_LOG_LEVEL=info
      - N8N_METRICS=true
      - WORKER_ID=worker-1
      - N8N_PAYLOAD_SIZE_MAX=16

      # Stock API access
      - STOCK_API_URL=http://stock-backend:4000
      - STOCK_API_TOKEN=${STOCK_API_TOKEN:-stock_api_token_123}

    volumes:
      - n8n_data:/home/node/.n8n:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n-main:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "[w]orker"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 🚀 N8N WORKER 2
  n8n-worker-2:
    image: n8nio/n8n:latest
    container_name: n8n_worker_2
    restart: always
    command: worker
    environment:
      # Shared database configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-stock_management}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-postgres}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-postgres123}

      # Queue configuration
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0

      # Worker settings
      - N8N_LOG_LEVEL=info
      - N8N_METRICS=true
      - WORKER_ID=worker-2
      - N8N_PAYLOAD_SIZE_MAX=16

      # Stock API access
      - STOCK_API_URL=http://stock-backend:4000
      - STOCK_API_TOKEN=${STOCK_API_TOKEN:-stock_api_token_123}

    volumes:
      - n8n_data:/home/node/.n8n:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n-main:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "[w]orker"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 🎨 STOCK MANAGEMENT FRONTEND
  stock-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stock_frontend
    restart: always
    ports:
      - "3001:3000"
    environment:
      - VITE_API_URL=http://localhost:4000
      - VITE_N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
    depends_on:
      stock-backend:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # 🔧 STOCK MANAGEMENT BACKEND
  stock-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stock_backend
    restart: always
    ports:
      - "4000:4000"
    environment:
      # 🔄 SHARED DATABASE CONFIGURATION
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres123}
      - DB_NAME=${POSTGRES_DB:-stock_management}
      - DB_SSL=false

      # Auth & Security
      - JWT_SECRET=${JWT_SECRET:-test_secret}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-your_google_client_id_here}
      - FRONTEND_URL=http://localhost:3001

      # N8N Integration
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
      - N8N_API_URL=http://n8n-main:5678
      - N8N_API_TOKEN=${N8N_API_TOKEN:-n8n_api_token_123}

      # Real-time sync
      - REDIS_URL=redis://redis:6379
      - ENABLE_N8N_SYNC=true

    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 🗄️ SHARED POSTGRESQL DATABASE
  postgres:
    image: postgres:13
    container_name: shared_postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-stock_management}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # 🔴 SHARED REDIS (Cache + Queue)
  redis:
    image: redis:6-alpine
    container_name: shared_redis
    restart: always
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 300
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 📊 MONITORING - Redis Commander (opcional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app_network
    profiles:
      - monitoring

  # 📊 MONITORING - PgAdmin (opcional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    profiles:
      - monitoring

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - stock-frontend
      - stock-backend
    networks:
      - app_network

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
